{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\shloi\\\\WebstormProjects\\\\devconnector2\\\\client\\\\src\\\\components\\\\dashboard\\\\Dashboard.js\";\nimport React, { Fragment, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport Spinner from '../layout/Spinner';\nimport { connect } from \"react-redux\";\nimport { getCurrentProfile, deleteAccount } from \"../../actions/profile\";\nimport DashboardActions from './DashboardActions';\nimport Experience from './Experience';\nimport Education from './Education';\nimport { Link } from \"react-router-dom\";\n\nconst Dashboard = ({\n  getCurrentProfile,\n  deleteAccount,\n  auth: {\n    user\n  },\n  profile: {\n    profile,\n    loading\n  }\n}) => {\n  useEffect(() => {\n    getCurrentProfile();\n  }, []);\n  return loading && profile === null ? React.createElement(Spinner, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17\n    },\n    __self: this\n  }) : React.createElement(Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    className: \"large text-primary\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18\n    },\n    __self: this\n  }, \"Dashboard\"), React.createElement(\"p\", {\n    className: \"lead\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19\n    },\n    __self: this\n  }, React.createElement(\"i\", {\n    className: \"fas fa-user\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20\n    },\n    __self: this\n  }), \" Welcome \", user && user.name), profile !== null ? React.createElement(Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22\n    },\n    __self: this\n  }, React.createElement(DashboardActions, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23\n    },\n    __self: this\n  }), React.createElement(Experience, {\n    experience: profile.experience,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24\n    },\n    __self: this\n  }), React.createElement(Education, {\n    education: profile.education,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: \"my-2\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    className: \"btn btn-danger\",\n    onClick: () => deleteAccount(),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  }, React.createElement(\"i\", {\n    className: \"fas fa-user-minus\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29\n    },\n    __self: this\n  }), \" Delete My Account\"))) : React.createElement(Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }, \"You have not yet setup a profile, please add some info\"), React.createElement(Link, {\n    to: \"/create-profile\",\n    className: \"btn btn-primary my-1\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }, \"Create Profile\")));\n};\n\nDashboard.propTypes = {\n  getCurrentProfile: PropTypes.func.isRequired,\n  auth: PropTypes.object.isRequired,\n  profile: PropTypes.object.isRequired,\n  deleteAccount: PropTypes.func.isRequired\n};\n\nconst mapStateToProps = state => ({\n  auth: state.auth,\n  profile: state.profile\n});\n\nexport default connect(mapStateToProps, {\n  getCurrentProfile,\n  deleteAccount\n})(Dashboard);","map":{"version":3,"sources":["C:\\Users\\shloi\\WebstormProjects\\devconnector2\\client\\src\\components\\dashboard\\Dashboard.js"],"names":["React","Fragment","useEffect","PropTypes","Spinner","connect","getCurrentProfile","deleteAccount","DashboardActions","Experience","Education","Link","Dashboard","auth","user","profile","loading","name","experience","education","propTypes","func","isRequired","object","mapStateToProps","state"],"mappings":"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","sourcesContent":["import React, {Fragment, useEffect} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Spinner from '../layout/Spinner';\r\nimport {connect} from \"react-redux\";\r\nimport {getCurrentProfile, deleteAccount} from \"../../actions/profile\";\r\nimport DashboardActions from './DashboardActions';\r\nimport Experience from './Experience';\r\nimport Education from './Education';\r\nimport {Link} from \"react-router-dom\";\r\n\r\n\r\nconst Dashboard = ({getCurrentProfile, deleteAccount, auth: {user}, profile: {profile, loading}}) => {\r\n    useEffect(() => {\r\n        getCurrentProfile();\r\n    }, []);\r\n\r\n    return loading && profile === null ? <Spinner/> : <Fragment>\r\n        <h1 className='large text-primary'>Dashboard</h1>\r\n        <p className='lead'>\r\n            <i className='fas fa-user'></i> Welcome {user && user.name}\r\n        </p>\r\n        {profile !== null ? <Fragment>\r\n                <DashboardActions/>\r\n                <Experience experience={profile.experience}/>\r\n                <Education education={profile.education}/>\r\n\r\n                <div className=\"my-2\">\r\n                    <button className=\"btn btn-danger\" onClick={() => deleteAccount()}>\r\n                        <i className=\"fas fa-user-minus\"></i> Delete My Account\r\n                    </button>\r\n                </div>\r\n\r\n            </Fragment> :\r\n\r\n            <Fragment>\r\n                <p>You have not yet setup a profile, please add some info</p>\r\n                <Link to='/create-profile' className='btn btn-primary my-1'>\r\n                    Create Profile\r\n                </Link>\r\n            </Fragment>}\r\n    </Fragment>;\r\n};\r\n\r\nDashboard.propTypes = {\r\n    getCurrentProfile: PropTypes.func.isRequired,\r\n    auth: PropTypes.object.isRequired,\r\n    profile: PropTypes.object.isRequired,\r\n    deleteAccount: PropTypes.func.isRequired\r\n};\r\n\r\n\r\nconst mapStateToProps = state => ({\r\n    auth: state.auth,\r\n    profile: state.profile\r\n});\r\n\r\n\r\nexport default connect(mapStateToProps, {getCurrentProfile, deleteAccount})(Dashboard);\r\n\r\n"]},"metadata":{},"sourceType":"module"}